# Given a singly linked list of N nodes. The task is to find the middle of the linked list. For example,
# if given linked list is 1->2->3->4->5 then the output should be 3.
# If there are even nodes, then there would be two middle nodes, we need to print the second middle element.
# For example, if given linked list is 1->2->3->4->5->6 then the output should be 4.



def findMid(head):
    # Code here
    count=0
    temp=head
    while temp is not None:
        temp=temp.next
        count+=1
    temp =head
    for i in range(int(count)//2):
        temp=temp.next
    return temp.data
 
#  Driver Code Starts
# Node Class    
class node:
    def __init__(self, val):
        self.data = val
        self.next = None
        
# Linked List Class
class Linked_List:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert(self, val):
        if self.head == None:
            self.head = node(val)
            self.tail = self.head
        else:
            new_node = node(val)
            self.tail.next = new_node
            self.tail = self.tail.next

def createList(arr, n):
    lis = Linked_List()
    for i in range(n):
        lis.insert(arr[i])
    return lis.head

if __name__=='__main__':
    t = int(input())
    for i in range(t):
        n = int(input())
        arr = list(map(int, input().strip().split()))
        head = createList(arr, n)
        print(findMid(head))
