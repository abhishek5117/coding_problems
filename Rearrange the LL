
# Given a singly linked list, the task is to rearrange it in a way that all odd position nodes are together and all even positions node are together.
# Assume the first element to be at position 1 followed by second element at position 2 and so on




def rearrangeEvenOdd(head):
    #code here
    if head==None or head.next==None:
        return head
    odd = head
    even = head.next
    
    x = even.next 
    
    while x:
        temp = x
        even.next = x.next
        even = even.next
        temp.next = odd.next
        odd.next = temp
        odd = odd.next
        x= even.next if even else None
        
    return head

#  Driver Code Starts
# Python3 program to rearrange a linked list 
# in such a way that all odd positioned 
# node are stored before all even positioned nodes 
# Linked List Node 
class Node: 
	def __init__(self, d): 
		self.data = d 
		self.next = None

class LinkedList: 
	def __init__(self): 
		self.head = None
		
	# A utility function to create 
	# a new node 
	def newNode(self, key): 
		temp = Node(key) 
		self.next = None
		return temp 

	# Rearranges given linked list 
	# such that all even positioned 
	# nodes are before odd positioned. 
	# Returns new head of linked List. 
	

	# A utility function to print a linked list 
	def printlist(self, node): 
		while (node != None): 
			print(node.data, end = " ") 
			node = node.next
		
	# Function to insert a new node 
	# at the beginning 
	def push(self, new_data): 
		new_node = Node(new_data) 
		new_node.next = self.head 
		self.head = new_node 

# Driver code 
if __name__ == '__main__':
    t=int(input())
    for cases in range(t):
        n=int(input())
        a=list(map(int,input().split()))
        ll = LinkedList() 
        for i in range(n-1,-1,-1):
            ll.push(a[i])
        start = rearrangeEvenOdd(ll.head) 
        ll.printlist(start) 
        print()
